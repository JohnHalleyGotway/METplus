[config]
## Configuration-related settings such as the process list, begin and end times, etc.
PROCESS_LIST = ASCII2NC, PointStat

## LOOP_ORDER
## Options are: processes, times
## Looping by time- runs all items in the PROCESS_LIST for each
## initialization time and repeats until all times have been evaluated.
## Looping by processes- run each item in the PROCESS_LIST for all
## specified initialization times then repeat for the next item in the
## PROCESS_LIST.
LOOP_ORDER = times

# time looping - options are INIT, VALID, RETRO, and REALTIME
# If set to INIT or RETRO:
#   INIT_TIME_FMT, INIT_BEG, INIT_END, and INIT_INCREMENT must also be set
# If set to VALID or REALTIME:
#   VALID_TIME_FMT, VALID_BEG, VALID_END, and VALID_INCREMENT must also be set
LOOP_BY = INIT

# Format of INIT_BEG and INIT_END
# %Y = 4 digit year, %m = 2 digit month, %d = 2 digit day, etc.
# see www.strftime.org for more information
# %Y%m%d%H expands to YYYYMMDDHH
INIT_TIME_FMT = %Y%m%d%H

# Start time for METplus run
INIT_BEG=2019081300

# End time for METplus run
INIT_END=2019081500

# Increment between METplus runs (in seconds if no units are specified)
#  Must be >= 60 seconds
INIT_INCREMENT=1d

# List of forecast leads to process for each run time (init or valid)
# If unset, defaults to 0 (don't loop through forecast leads)
LEAD_SEQ = begin_end_incr(0,240,1)


# Verbosity of MET output - overrides LOG_VERBOSITY for ASCII2NC only
LOG_ASCII2NC_VERBOSITY = 1

# MET Configuration file for ASCII2NC
# References CONFIG_DIR from the [dir] section
ASCII2NC_CONFIG_FILE = 

# If set to True, skip run if the output file determined by the output directory and
# filename template already exists
ASCII2NC_SKIP_IF_OUTPUT_EXISTS = True

# Time relative to valid time (in seconds if no units are specified) to allow files to be considered
#  valid. Set both BEGIN and END to 0 to require the exact time in the filename
#  Not used in this example.
ASCII2NC_FILE_WINDOW_BEGIN = 0
ASCII2NC_FILE_WINDOW_END = 0

# Time relative to each input file's valid time (in seconds if no units are specified) for data within the file to be
# considered valid.
ASCII2NC_WINDOW_BEGIN = 0
ASCII2NC_WINDOW_END = 0

# Value to pass with the -format argument to ascii2nc. See MET User's Guide for more information
ASCII2NC_INPUT_FORMAT =

# Value to pass with the -mask_grid argument to ascii2nc. See MET User's Guide for more information
ASCII2NC_MASK_GRID =

# Value to pass with the -mask_poly argument to ascii2nc. See MET User's Guide for more information
ASCII2NC_MASK_POLY = 

# Value to pass with the -mask_sid argument to ascii2nc. See MET User's Guide for more information
ASCII2NC_MASK_SID =

# For defining the time periods for summarization
# False for no time summary, True otherwise
# The rest of the ASCII2NC_TIME_SUMMARY variables are ignored if set to False
# See the MET User's Guide section regarding ASCII2NC time summary options for more information.
ASCII2NC_TIME_SUMMARY_FLAG = False
ASCII2NC_TIME_SUMMARY_RAW_DATA = False
ASCII2NC_TIME_SUMMARY_BEG = 000000
ASCII2NC_TIME_SUMMARY_END = 235959
ASCII2NC_TIME_SUMMARY_STEP = 300
ASCII2NC_TIME_SUMMARY_WIDTH = 600
ASCII2NC_TIME_SUMMARY_GRIB_CODES = 11, 204, 211
ASCII2NC_TIME_SUMMARY_VAR_NAMES =
ASCII2NC_TIME_SUMMARY_TYPES = min, max, range, mean, stdev, median, p80
ASCII2NC_TIME_SUMMARY_VALID_FREQ = 0
ASCII2NC_TIME_SUMMARY_VALID_THRESH = 0.0


# Verbosity of MET output - overrides LOG_VERBOSITY for PointStat only
LOG_POINT_STAT_VERBOSITY = 2

# Location of MET config file to pass to GridStat
# References PARM_BASE which is the location of the parm directory corresponding
# to the ush directory of the master_metplus.py script that is called
# or the value of the environment variable METPLUS_PARM_BASE if set
POINT_STAT_CONFIG_FILE ={POINT_STAT_CONFIG_DIR}/PointStatConfig_Skymet_state

# Time relative to each input file's valid time (in seconds if no units are specified) for data
# within the file to be considered valid. Values are set in the 'obs_window' dictionary in the 
# PointStat config file
OBS_POINT_STAT_WINDOW_BEGIN = 0
OBS_POINT_STAT_WINDOW_END = 0

# Optional list of offsets to look for point observation data
POINT_STAT_OFFSETS = 0

# Model/fcst and obs name, e.g. GFS, NAM, GDAS, etc.
MODEL = WRF
OBTYPE =

# Regrid to specified grid.  Indicate NONE if no regridding, or the grid id
# (e.g. G212)
POINT_STAT_REGRID_TO_GRID = NONE

# Sets the prefix for the output file
POINT_STAT_OUTPUT_PREFIX = state_vars

# Sets the -obs_valid_beg command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_BEG = {valid?fmt=%Y%m%d_%H}

# Sets the -obs_valid_end command line argument (optional)
# not used for this example
#POINT_STAT_OBS_VALID_END = {valid?fmt=%Y%m%d_%H}

# Verification Masking regions
# Indicate which grid and polygon masking region, if applicable
POINT_STAT_GRID = FULL

# List of full path to poly masking files.  NOTE: Only short lists of poly
# files work (those that fit on one line), a long list will result in an
# environment variable that is too long, resulting in an error.  For long
# lists of poly masking files (i.e. all the mask files in the NCEP_mask
# directory), define these in the MET point_stat configuration file.
POINT_STAT_POLY = {INPUT_BASE}/model_applications/medium_range/poly/Madhya_Pradesh_mask.nc
POINT_STAT_STATION_ID =

# Message types, if all message types are to be returned, leave this empty,
# otherwise indicate the message types of interest.
POINT_STAT_MESSAGE_TYPE = SKYMET, SYNOP_ONLY, METAR_SYNOP

# Variables and levels as specified in the field dictionary of the MET
# point_stat configuration file. Specify as FCST_VARn_NAME, FCST_VARn_LEVELS,
# (optional) FCST_VARn_OPTION

# Fields to compare
# Note: If FCST_VAR<n>_* is set, then a corresponding OBS_VAR<n>_* variable must be set
# To use one variables for both forecast and observation data, set BOTH_VAR<n>_* instead

FCST_VAR1_NAME = TMP
FCST_VAR1_LEVELS = Z2
FCST_VAR1_OPTIONS = convert(t) = K_to_C(t);
OBS_VAR1_NAME = T
OBS_VAR1_LEVELS = Z2

FCST_VAR2_NAME = DPT
FCST_VAR2_LEVELS = Z2
FCST_VAR2_OPTIONS = convert(t) = K_to_C(t);
OBS_VAR2_NAME = dewpt
OBS_VAR2_LEVELS = Z2

FCST_VAR3_NAME = UGRD
FCST_VAR3_LEVELS = Z10
OBS_VAR3_NAME = UGRD
OBS_VAR3_LEVELS = Z10

FCST_VAR4_NAME = UGRD
FCST_VAR4_LEVELS = Z10
OBS_VAR4_NAME = UGRD
OBS_VAR4_LEVELS = Z10


# End of [config] section and start of [dir] section
[dir]

# Location of configuration files used by MET applications 
CONFIG_DIR=

# Input/Output directories can be left empty if the corresponding template contains the full path 
# to the files
ASCII2NC_INPUT_DIR = {INPUT_BASE}/model_applications/medium_range/skymet/obs
ASCII2NC_OUTPUT_DIR = {OUTPUT_BASE}/ascii2nc


# Location of configuration files used by PointStat 
POINT_STAT_CONFIG_DIR = {PARM_BASE}/use_cases/model_applications/medium_range

# Locations of fcst and obs input data to PointStat
FCST_POINT_STAT_INPUT_DIR = {INPUT_BASE}/model_applications/medium_range/skymet/wrf
OBS_POINT_STAT_INPUT_DIR = {ASCII2NC_OUTPUT_DIR}

# Directory containing climatology mean input to PointStat
# Not used in this example
POINT_STAT_CLIMO_MEAN_INPUT_DIR =

# Directory containing climatology mean input to PointStat
# Not used in this example
POINT_STAT_CLIMO_STDEV_INPUT_DIR =

# A list of text strings can be defined in the METplus wrappers configuration files to allow each 
# wrapper to process data multiple times for each run time. The variable CUSTOM_LOOP_LIST will apply
# the values to each wrapper in the PROCESS_LIST unless the wrapper does not support this functionality.
POINT_STAT_CUSTOM_LOOP_LIST = exp01, exp03

# Location of output stat data
#POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE}/point_stat
POINT_STAT_OUTPUT_DIR = {OUTPUT_BASE}/wrf

# End of [dir] section and start of [filename_templates] section
[filename_templates]

# Template to look for input to ASCII2NC relative to ASCII2NC_INPUT_DIR
ASCII2NC_INPUT_TEMPLATE = {valid?fmt=%Y%m%d}/met_int_obs.{valid?fmt=%Y%m%d}.csv
			
# Template to use to write output from ASCII2NC
ASCII2NC_OUTPUT_TEMPLATE = met_int_obs.{valid?fmt=%Y%m%d}.nc


# Template to look for forecast input to PointStat relative to FCST_POINT_STAT_INPUT_DIR
FCST_POINT_STAT_INPUT_TEMPLATE = {custom?fmt=%s}/{init?fmt=%Y-%m-%d_%H}/uppout/WRFPRS_d01.{lead?fmt=%2H}.grib2

# Template to look for observation input to PointStat relative to OBS_POINT_STAT_INPUT_DIR
OBS_POINT_STAT_INPUT_TEMPLATE = {ASCII2NC_OUTPUT_TEMPLATE}

# Template to look for climatology input to PointStat relative to POINT_STAT_CLIMO_MEAN_INPUT_DIR
# Not used in this example
POINT_STAT_CLIMO_MEAN_INPUT_TEMPLATE =

# Template to look for climatology input to PointStat relative to POINT_STAT_CLIMO_STDEV_INPUT_DIR
# Not used in this example
POINT_STAT_CLIMO_STDEV_INPUT_TEMPLATE =

# Template to be added to POINT_STAT_OUTPUT_DIR (so that "custom" will work
POINT_STAT_OUTPUT_TEMPLATE = {custom?fmt=%s}/{init?fmt=%Y-%m-%d_%H}/metout/point_stat_state


[user_env_vars]
# Sets environment variables

# Set MODEL_NAME to be used in PointStat config file
MODEL_NAME = {custom?fmt=%s}
